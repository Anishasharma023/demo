{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["require","config","App","useState","query","setQuery","weather","setWeather","className","main","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","process","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","humidity","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAEAA,EAAQ,IAAUC,SAgGHC,MA5Ff,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,KAgCb,OACE,qBAAKC,UAAU,OAAf,SACA,qBAAKA,UAAmC,oBAAhBF,EAAQG,KAEH,UAA1BH,EAAQA,QAAQ,GAAGG,KAAkB,YACZ,WAA1BH,EAAQA,QAAQ,GAAGG,KAAmB,aACZ,SAA1BH,EAAQA,QAAQ,GAAGG,KAAiB,WACV,SAA1BH,EAAQA,QAAQ,GAAGG,KAAiB,WACV,SAA1BH,EAAQA,QAAQ,GAAGG,KAAiB,WACV,UAA1BH,EAAQA,QAAQ,GAAGG,KAAkB,YACtC,MACK,MATN,SAWE,8BACE,iCACE,yCAEA,qBAAKD,UAAU,aAAf,SACE,uBAAOE,KAAK,OACZF,UAAU,aACVG,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOC,QACjCA,MAAOX,EACPY,WAlDK,SAAAC,GACE,UAAZA,EAAIC,KAELC,MAAK,4DAAuDf,EAAvD,+BATKgB,qCAUVC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACfF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WA+Ca,oBAAhBlB,EAAQG,KACf,gCAEA,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,qBAAKrB,UAAU,OAAf,SA9CU,SAACsB,GACpB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAqCFE,CAAY,IAAIC,WAKzC,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACCiC,KAAKC,MAAMpC,EAAQG,KAAKkC,MADzB,WAGA,sBAAKnC,UAAU,WAAf,wBACYiC,KAAKC,MAAMpC,EAAQG,KAAKmC,aAEpC,qBAAKpC,UAAU,cAAf,SACGF,EAAQA,QAAQ,GAAGG,aAMnB,aC9EAoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.725497c5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nrequire('dotenv').config();\n\n\nconst api_key = process.env.REACT_APP_API_KEY;\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  \n  const search = evt =>{\n    if(evt.key === \"Enter\"){\n      //fetch(`${api.base}weather?q=${query}&APPID={api.key}`)  https://crossorigin.me/http://\n      fetch (`https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&APPID=${api_key}`)\n     .then(res => res.json())\n      .then(result=>{\n        setWeather(result);\n        setQuery('');\n        console.log(result);\n        //console.log(query);\n      });\n    }\n  }\n\n  const dateBuilder = (d) =>{\n   let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n   let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thrusday\", \"Friday\", \"Saturday\"];\n\n   let day = days[d.getDay()];\n   let date = d.getDate();\n   let month = months[d.getMonth()];\n   let year = d.getFullYear();\n\n   return `${day} ${date} ${month} ${year}`\n   \n  }\n\n  return (\n    <div className=\"wrap\">\n    <div className={(typeof weather.main != \"undefined\") ? \n    //((weather.main.temp>26) ? 'App clear' : 'App')\n     ((weather.weather[0].main===\"Clear\") ? 'App clear' : \n     (weather.weather[0].main===\"Clouds\") ? 'App clouds' : \n     (weather.weather[0].main===\"Rain\") ? 'App rain' : \n     (weather.weather[0].main===\"Haze\") ? 'App haze' : \n     (weather.weather[0].main===\"Mist\") ? 'App mist' :\n     (weather.weather[0].main===\"Smoke\") ? 'App smoke' :\n     'App') \n        : 'App'}>\n\n      <div>\n        <main>\n          <h2>WEATHER</h2>\n          {/*search box*/}\n          <div className=\"search-box\">\n            <input type=\"text\" \n            className=\"search-bar\"\n            placeholder=\"search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n            />\n          </div>\n          {/*search box*/}\n\n        {(typeof weather.main != \"undefined\") ? (\n          <div>\n            {/*location and date box*/}\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          {/*location and date box*/}\n\n          {/*weather box*/}\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n            {Math.round(weather.main.temp)}ÂºC \n            </div>\n            <div className=\"humidity\">\n            Humidity : {Math.round(weather.main.humidity)}\n            </div>\n            <div className=\"weathe-type\">\n              {weather.weather[0].main}\n            </div>\n\n          </div>\n          {/*weather box*/}\n          </div>\n          ) : ('')}\n        </main>\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}